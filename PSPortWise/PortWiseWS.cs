//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=4.6.1055.0.
// 
namespace PortWiseWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;

    public enum AccountType { PolicyService = 1, AuthenticationService }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [WebServiceBinding(Name="AuthenticationSoapBinding", Namespace="http://portwise.com/ws/authentication")]
    [SoapInclude(typeof(MapItem))]
    public partial class AuthenticateService : SoapHttpClientProtocol
    {
        
        private System.Threading.SendOrPostCallback authenticateOperationCompleted;
        
        private System.Threading.SendOrPostCallback logoutOperationCompleted;
        
        /// <remarks/>
        public AuthenticateService(string server) {
            Url = server.TrimEnd('/') + "/ws/services/Authentication";
        }
        
        /// <remarks/>
        public event authenticateCompletedEventHandler authenticateCompleted;
        
        /// <remarks/>
        public event logoutCompletedEventHandler logoutCompleted;
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/authentication", ResponseNamespace="http://portwise.com/ws/authentication")]
        [return: SoapElement("authenticateReturn")]
        public Subject authenticate(Subject in0, int in1) {
            object[] results = Invoke("authenticate", new object[] {
                        in0,
                        in1});
            return ((Subject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginauthenticate(Subject in0, int in1, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("authenticate", new object[] {
                        in0,
                        in1}, callback, asyncState);
        }
        
        /// <remarks/>
        public Subject Endauthenticate(System.IAsyncResult asyncResult) {
            object[] results = EndInvoke(asyncResult);
            return ((Subject)(results[0]));
        }
        
        /// <remarks/>
        public void authenticateAsync(Subject in0, int in1) {
            authenticateAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void authenticateAsync(Subject in0, int in1, object userState) {
            if ((authenticateOperationCompleted == null)) {
                authenticateOperationCompleted = new System.Threading.SendOrPostCallback(OnauthenticateOperationCompleted);
            }
            InvokeAsync("authenticate", new object[] {
                        in0,
                        in1}, authenticateOperationCompleted, userState);
        }
        
        private void OnauthenticateOperationCompleted(object arg) {
            if ((authenticateCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                authenticateCompleted(this, new authenticateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/authentication", ResponseNamespace="http://portwise.com/ws/authentication")]
        [return: SoapElement("logoutReturn")]
        public Subject logout(Subject in0) {
            object[] results = Invoke("logout", new object[] {
                        in0});
            return ((Subject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginlogout(Subject in0, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("logout", new object[] {
                        in0}, callback, asyncState);
        }
        
        /// <remarks/>
        public Subject Endlogout(System.IAsyncResult asyncResult) {
            object[] results = EndInvoke(asyncResult);
            return ((Subject)(results[0]));
        }
        
        /// <remarks/>
        public void logoutAsync(Subject in0) {
            logoutAsync(in0, null);
        }
        
        /// <remarks/>
        public void logoutAsync(Subject in0, object userState) {
            if ((logoutOperationCompleted == null)) {
                logoutOperationCompleted = new System.Threading.SendOrPostCallback(OnlogoutOperationCompleted);
            }
            InvokeAsync("logout", new object[] {
                        in0}, logoutOperationCompleted, userState);
        }
        
        private void OnlogoutOperationCompleted(object arg) {
            if ((logoutCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                logoutCompleted(this, new logoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [SoapType(Namespace="http://portwise.com/ws/authentication")]
    public partial class Subject {
        
        private string countryField;
        
        private MapItem[] credentialsField;
        
        private string languageField;
        
        private MapItem[] principalsField;
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string country {
            get {
                return countryField;
            }
            set {
                countryField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public MapItem[] credentials {
            get {
                return credentialsField;
            }
            set {
                credentialsField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string language {
            get {
                return languageField;
            }
            set {
                languageField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public MapItem[] principals {
            get {
                return principalsField;
            }
            set {
                principalsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [SoapType(Namespace="http://portwise.com/ws/util")]
    public partial class MapItem {
        
        private string keyField;
        
        private byte[] valueField;
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string key {
            get {
                return keyField;
            }
            set {
                keyField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(DataType="base64Binary", IsNullable=true)]
        public byte[] value {
            get {
                return valueField;
            }
            set {
                valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void authenticateCompletedEventHandler(object sender, authenticateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class authenticateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal authenticateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Subject Result {
            get {
                RaiseExceptionIfNecessary();
                return ((Subject)(results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void logoutCompletedEventHandler(object sender, logoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class logoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal logoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Subject Result {
            get {
                RaiseExceptionIfNecessary();
                return ((Subject)(results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [WebServiceBinding(Name="AuthorizationSoapBinding", Namespace="http://portwise.com/ws/authorization")]
    public partial class AuthorizeService : SoapHttpClientProtocol
    {
        
        private System.Threading.SendOrPostCallback authorizeOperationCompleted;
        
        /// <remarks/>
        public AuthorizeService(string server) {
            Url = server.TrimEnd('/') + "/ws/services/Authorization";
        }
        
        /// <remarks/>
        public event authorizeCompletedEventHandler authorizeCompleted;
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/authorization", ResponseNamespace="http://portwise.com/ws/authorization")]
        public void authorize(Subject in0, string in1, MapItem[] in2) {
            Invoke("authorize", new object[] {
                        in0,
                        in1,
                        in2});
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginauthorize(Subject in0, string in1, MapItem[] in2, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("authorize", new object[] {
                        in0,
                        in1,
                        in2}, callback, asyncState);
        }
        
        /// <remarks/>
        public void Endauthorize(System.IAsyncResult asyncResult) {
            EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void authorizeAsync(Subject in0, string in1, MapItem[] in2) {
            authorizeAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void authorizeAsync(Subject in0, string in1, MapItem[] in2, object userState) {
            if ((authorizeOperationCompleted == null)) {
                authorizeOperationCompleted = new System.Threading.SendOrPostCallback(OnauthorizeOperationCompleted);
            }
            InvokeAsync("authorize", new object[] {
                        in0,
                        in1,
                        in2}, authorizeOperationCompleted, userState);
        }
        
        private void OnauthorizeOperationCompleted(object arg) {
            if ((authorizeCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                authorizeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
        
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void authorizeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [WebServiceBinding(Name="OATHSoapBinding", Namespace="http://portwise.com/ws/oath")]
    public partial class OATHService : SoapHttpClientProtocol
    {
        
        private System.Threading.SendOrPostCallback getProvidersOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOATHPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback resynchOATHTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateOATHPropertiesOperationCompleted;
        
        /// <remarks/>
        public OATHService(string server) {
            Url = server.TrimEnd('/') + "/ws/services/OATH";
        }

        /// <remarks/>
        public event getProvidersCompletedEventHandler getProvidersCompleted;
        
        /// <remarks/>
        public event getOATHPropertiesCompletedEventHandler getOATHPropertiesCompleted;
        
        /// <remarks/>
        public event resynchOATHTokenCompletedEventHandler resynchOATHTokenCompleted;
        
        /// <remarks/>
        public event updateOATHPropertiesCompletedEventHandler updateOATHPropertiesCompleted;
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/oath", ResponseNamespace="http://portwise.com/ws/oath")]
        [return: SoapElement("getProvidersReturn")]
        public Provider[] getProviders(Subject in0) {
            object[] results = Invoke("getProviders", new object[] {
                        in0});
            return ((Provider[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetProviders(Subject in0, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("getProviders", new object[] {
                        in0}, callback, asyncState);
        }
        
        /// <remarks/>
        public Provider[] EndgetProviders(System.IAsyncResult asyncResult) {
            object[] results = EndInvoke(asyncResult);
            return ((Provider[])(results[0]));
        }
        
        /// <remarks/>
        public void getProvidersAsync(Subject in0) {
            getProvidersAsync(in0, null);
        }
        
        /// <remarks/>
        public void getProvidersAsync(Subject in0, object userState) {
            if ((getProvidersOperationCompleted == null)) {
                getProvidersOperationCompleted = new System.Threading.SendOrPostCallback(OngetProvidersOperationCompleted);
            }
            InvokeAsync("getProviders", new object[] {
                        in0}, getProvidersOperationCompleted, userState);
        }
        
        private void OngetProvidersOperationCompleted(object arg) {
            if ((getProvidersCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                getProvidersCompleted(this, new getProvidersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/oath", ResponseNamespace="http://portwise.com/ws/oath")]
        [return: SoapElement("getOATHPropertiesReturn")]
        public OATHProperties getOATHProperties(Subject in0, string in1) {
            object[] results = Invoke("getOATHProperties", new object[] {
                        in0,
                        in1});
            return ((OATHProperties)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetOATHProperties(Subject in0, string in1, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("getOATHProperties", new object[] {
                        in0,
                        in1}, callback, asyncState);
        }
        
        /// <remarks/>
        public OATHProperties EndgetOATHProperties(System.IAsyncResult asyncResult) {
            object[] results = EndInvoke(asyncResult);
            return ((OATHProperties)(results[0]));
        }
        
        /// <remarks/>
        public void getOATHPropertiesAsync(Subject in0, string in1) {
            getOATHPropertiesAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getOATHPropertiesAsync(Subject in0, string in1, object userState) {
            if ((getOATHPropertiesOperationCompleted == null)) {
                getOATHPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(OngetOATHPropertiesOperationCompleted);
            }
            InvokeAsync("getOATHProperties", new object[] {
                        in0,
                        in1}, getOATHPropertiesOperationCompleted, userState);
        }
        
        private void OngetOATHPropertiesOperationCompleted(object arg) {
            if ((getOATHPropertiesCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                getOATHPropertiesCompleted(this, new getOATHPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/oath", ResponseNamespace="http://portwise.com/ws/oath")]
        public void resynchOATHToken(Subject in0, string in1, OATHToken in2, string in3, string in4) {
            Invoke("resynchOATHToken", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginresynchOATHToken(Subject in0, string in1, OATHToken in2, string in3, string in4, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("resynchOATHToken", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndresynchOATHToken(System.IAsyncResult asyncResult) {
            EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void resynchOATHTokenAsync(Subject in0, string in1, OATHToken in2, string in3, string in4) {
            resynchOATHTokenAsync(in0, in1, in2, in3, in4, null);
        }
        
        /// <remarks/>
        public void resynchOATHTokenAsync(Subject in0, string in1, OATHToken in2, string in3, string in4, object userState) {
            if ((resynchOATHTokenOperationCompleted == null)) {
                resynchOATHTokenOperationCompleted = new System.Threading.SendOrPostCallback(OnresynchOATHTokenOperationCompleted);
            }
            InvokeAsync("resynchOATHToken", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4}, resynchOATHTokenOperationCompleted, userState);
        }
        
        private void OnresynchOATHTokenOperationCompleted(object arg) {
            if ((resynchOATHTokenCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                resynchOATHTokenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/oath", ResponseNamespace="http://portwise.com/ws/oath")]
        public void updateOATHProperties(Subject in0, OATHProperties in1) {
            Invoke("updateOATHProperties", new object[] {
                        in0,
                        in1});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginupdateOATHProperties(Subject in0, OATHProperties in1, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("updateOATHProperties", new object[] {
                        in0,
                        in1}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndupdateOATHProperties(System.IAsyncResult asyncResult) {
            EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void updateOATHPropertiesAsync(Subject in0, OATHProperties in1) {
            updateOATHPropertiesAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void updateOATHPropertiesAsync(Subject in0, OATHProperties in1, object userState) {
            if ((updateOATHPropertiesOperationCompleted == null)) {
                updateOATHPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(OnupdateOATHPropertiesOperationCompleted);
            }
            InvokeAsync("updateOATHProperties", new object[] {
                        in0,
                        in1}, updateOATHPropertiesOperationCompleted, userState);
        }
        
        private void OnupdateOATHPropertiesOperationCompleted(object arg) {
            if ((updateOATHPropertiesCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                updateOATHPropertiesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
       
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [SoapType(Namespace="http://portwise.com/ws/oath")]
    public partial class OATHToken {
        
        private bool enabledField;
        
        private Provider providerField;
        
        private int revocationStatusField;
        
        private string tokenIdField;
        
        /// <remarks/>
        public bool enabled {
            get {
                return enabledField;
            }
            set {
                enabledField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public Provider provider {
            get {
                return providerField;
            }
            set {
                providerField = value;
            }
        }
        
        /// <remarks/>
        public int revocationStatus {
            get {
                return revocationStatusField;
            }
            set {
                revocationStatusField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string tokenId {
            get {
                return tokenIdField;
            }
            set {
                tokenIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [SoapType(Namespace="http://portwise.com/ws/oath")]
    public partial class Provider {
        
        private long idField;
        
        private string nameField;
        
        /// <remarks/>
        public long id {
            get {
                return idField;
            }
            set {
                idField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string name {
            get {
                return nameField;
            }
            set {
                nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [SoapType(Namespace="http://portwise.com/ws/oath")]
    public partial class OATHProperties {
        
        private bool enabledField;
        
        private bool generatePwdField;
        
        private OATHToken[] oathTokensField;
        
        private string passwordField;
        
        private bool pwdNeverExpiresField;
        
        private bool useDirectoryPwdField;
        
        private bool userCannotChangePwdField;
        
        private bool userMustChangePwdField;
        
        private string userNameField;
        
        /// <remarks/>
        public bool enabled {
            get {
                return enabledField;
            }
            set {
                enabledField = value;
            }
        }
        
        /// <remarks/>
        public bool generatePwd {
            get {
                return generatePwdField;
            }
            set {
                generatePwdField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public OATHToken[] oathTokens {
            get {
                return oathTokensField;
            }
            set {
                oathTokensField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string password {
            get {
                return passwordField;
            }
            set {
                passwordField = value;
            }
        }
        
        /// <remarks/>
        public bool pwdNeverExpires {
            get {
                return pwdNeverExpiresField;
            }
            set {
                pwdNeverExpiresField = value;
            }
        }
        
        /// <remarks/>
        public bool useDirectoryPwd {
            get {
                return useDirectoryPwdField;
            }
            set {
                useDirectoryPwdField = value;
            }
        }
        
        /// <remarks/>
        public bool userCannotChangePwd {
            get {
                return userCannotChangePwdField;
            }
            set {
                userCannotChangePwdField = value;
            }
        }
        
        /// <remarks/>
        public bool userMustChangePwd {
            get {
                return userMustChangePwdField;
            }
            set {
                userMustChangePwdField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string userName {
            get {
                return userNameField;
            }
            set {
                userNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void getProvidersCompletedEventHandler(object sender, getProvidersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class getProvidersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProvidersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Provider[] Result {
            get {
                RaiseExceptionIfNecessary();
                return ((Provider[])(results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void getOATHPropertiesCompletedEventHandler(object sender, getOATHPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class getOATHPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOATHPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OATHProperties Result {
            get {
                RaiseExceptionIfNecessary();
                return ((OATHProperties)(results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void resynchOATHTokenCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void updateOATHPropertiesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [WebServiceBinding(Name="SessionSoapBinding", Namespace="http://portwise.com/ws/session")]
    public partial class SessionsService : SoapHttpClientProtocol
    {
        
        private System.Threading.SendOrPostCallback getInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback terminateOperationCompleted;
        
        /// <remarks/>
        public SessionsService(string server) {
            Url = Url = server.TrimEnd('/') + "/ws/services/Session";
        }
        
        /// <remarks/>
        public event getInfoCompletedEventHandler getInfoCompleted;
        
        /// <remarks/>
        public event terminateCompletedEventHandler terminateCompleted;
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/session", ResponseNamespace="http://portwise.com/ws/session")]
        [return: SoapElement("getInfoReturn")]
        public MapItem[] getInfo(Subject in0, string in1, int in2) {
            object[] results = Invoke("getInfo", new object[] {
                        in0,
                        in1,
                        in2});
            return ((MapItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetInfo(Subject in0, string in1, int in2, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("getInfo", new object[] {
                        in0,
                        in1,
                        in2}, callback, asyncState);
        }
        
        /// <remarks/>
        public MapItem[] EndgetInfo(System.IAsyncResult asyncResult) {
            object[] results = EndInvoke(asyncResult);
            return ((MapItem[])(results[0]));
        }
        
        /// <remarks/>
        public void getInfoAsync(Subject in0, string in1, int in2) {
            getInfoAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void getInfoAsync(Subject in0, string in1, int in2, object userState) {
            if ((getInfoOperationCompleted == null)) {
                getInfoOperationCompleted = new System.Threading.SendOrPostCallback(OngetInfoOperationCompleted);
            }
            InvokeAsync("getInfo", new object[] {
                        in0,
                        in1,
                        in2}, getInfoOperationCompleted, userState);
        }
        
        private void OngetInfoOperationCompleted(object arg) {
            if ((getInfoCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                getInfoCompleted(this, new getInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/session", ResponseNamespace="http://portwise.com/ws/session")]
        public void terminate(Subject in0, string in1) {
            Invoke("terminate", new object[] {
                        in0,
                        in1});
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginterminate(Subject in0, string in1, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("terminate", new object[] {
                        in0,
                        in1}, callback, asyncState);
        }
        
        /// <remarks/>
        public void Endterminate(System.IAsyncResult asyncResult) {
            EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void terminateAsync(Subject in0, string in1) {
            terminateAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void terminateAsync(Subject in0, string in1, object userState) {
            if ((terminateOperationCompleted == null)) {
                terminateOperationCompleted = new System.Threading.SendOrPostCallback(OnterminateOperationCompleted);
            }
            InvokeAsync("terminate", new object[] {
                        in0,
                        in1}, terminateOperationCompleted, userState);
        }
        
        private void OnterminateOperationCompleted(object arg) {
            if ((terminateCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                terminateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void getInfoCompletedEventHandler(object sender, getInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class getInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MapItem[] Result {
            get {
                RaiseExceptionIfNecessary();
                return ((MapItem[])(results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void terminateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [WebServiceBinding(Name="SingleSignOnSoapBinding", Namespace="http://portwise.com/ws/sso")]
    public partial class SingleSignOnService : SoapHttpClientProtocol
    {
        
        private System.Threading.SendOrPostCallback deleteCredentialOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCredentialOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateCredentialOperationCompleted;
        
        /// <remarks/>
        public SingleSignOnService(string server) {
            Url = server.TrimEnd('/') + "/ws/services/SingleSignOn";
        }
        
        /// <remarks/>
        public event deleteCredentialCompletedEventHandler deleteCredentialCompleted;
        
        /// <remarks/>
        public event getCredentialCompletedEventHandler getCredentialCompleted;
        
        /// <remarks/>
        public event updateCredentialCompletedEventHandler updateCredentialCompleted;
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/sso", ResponseNamespace="http://portwise.com/ws/sso")]
        public void deleteCredential(Subject in0, string in1) {
            Invoke("deleteCredential", new object[] {
                        in0,
                        in1});
        }
        
        /// <remarks/>
        public System.IAsyncResult BegindeleteCredential(Subject in0, string in1, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("deleteCredential", new object[] {
                        in0,
                        in1}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EnddeleteCredential(System.IAsyncResult asyncResult) {
            EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void deleteCredentialAsync(Subject in0, string in1) {
            deleteCredentialAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void deleteCredentialAsync(Subject in0, string in1, object userState) {
            if ((deleteCredentialOperationCompleted == null)) {
                deleteCredentialOperationCompleted = new System.Threading.SendOrPostCallback(OndeleteCredentialOperationCompleted);
            }
            InvokeAsync("deleteCredential", new object[] {
                        in0,
                        in1}, deleteCredentialOperationCompleted, userState);
        }
        
        private void OndeleteCredentialOperationCompleted(object arg) {
            if ((deleteCredentialCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                deleteCredentialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/sso", ResponseNamespace="http://portwise.com/ws/sso")]
        [return: SoapElement("getCredentialReturn")]
        public MapItem[] getCredential(Subject in0, string in1) {
            object[] results = Invoke("getCredential", new object[] {
                        in0,
                        in1});
            return ((MapItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetCredential(Subject in0, string in1, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("getCredential", new object[] {
                        in0,
                        in1}, callback, asyncState);
        }
        
        /// <remarks/>
        public MapItem[] EndgetCredential(System.IAsyncResult asyncResult) {
            object[] results = EndInvoke(asyncResult);
            return ((MapItem[])(results[0]));
        }
        
        /// <remarks/>
        public void getCredentialAsync(Subject in0, string in1) {
            getCredentialAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getCredentialAsync(Subject in0, string in1, object userState) {
            if ((getCredentialOperationCompleted == null)) {
                getCredentialOperationCompleted = new System.Threading.SendOrPostCallback(OngetCredentialOperationCompleted);
            }
            InvokeAsync("getCredential", new object[] {
                        in0,
                        in1}, getCredentialOperationCompleted, userState);
        }
        
        private void OngetCredentialOperationCompleted(object arg) {
            if ((getCredentialCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                getCredentialCompleted(this, new getCredentialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/sso", ResponseNamespace="http://portwise.com/ws/sso")]
        public void updateCredential(Subject in0, string in1, MapItem[] in2) {
            Invoke("updateCredential", new object[] {
                        in0,
                        in1,
                        in2});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginupdateCredential(Subject in0, string in1, MapItem[] in2, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("updateCredential", new object[] {
                        in0,
                        in1,
                        in2}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndupdateCredential(System.IAsyncResult asyncResult) {
            EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void updateCredentialAsync(Subject in0, string in1, MapItem[] in2) {
            updateCredentialAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void updateCredentialAsync(Subject in0, string in1, MapItem[] in2, object userState) {
            if ((updateCredentialOperationCompleted == null)) {
                updateCredentialOperationCompleted = new System.Threading.SendOrPostCallback(OnupdateCredentialOperationCompleted);
            }
            InvokeAsync("updateCredential", new object[] {
                        in0,
                        in1,
                        in2}, updateCredentialOperationCompleted, userState);
        }
        
        private void OnupdateCredentialOperationCompleted(object arg) {
            if ((updateCredentialCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                updateCredentialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void deleteCredentialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void getCredentialCompletedEventHandler(object sender, getCredentialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class getCredentialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCredentialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MapItem[] Result {
            get {
                RaiseExceptionIfNecessary();
                return ((MapItem[])(results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void updateCredentialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [WebServiceBinding(Name="UserAccountSoapBinding", Namespace="http://portwise.com/ws/user")]
    [SoapInclude(typeof(InvisibleToken))]
    public partial class UserAccountService : SoapHttpClientProtocol
    {
        
        private System.Threading.SendOrPostCallback addOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeOperationCompleted;
        
        private System.Threading.SendOrPostCallback resetOperationCompleted;
        
        private System.Threading.SendOrPostCallback isDefinedOperationCompleted;
        
        private System.Threading.SendOrPostCallback enableOperationCompleted;
        
        private System.Threading.SendOrPostCallback unlockOperationCompleted;
        
        private System.Threading.SendOrPostCallback isLockedOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateOperationCompleted;
        
        private System.Threading.SendOrPostCallback isEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback unlinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback linkOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLockedOperationCompleted;
        
        /// <remarks/>
        public UserAccountService(string server) {
            Url = server.TrimEnd('/') + "/ws/services/UserAccount";
        }

        /// <remarks/>
        public event addCompletedEventHandler addCompleted;
        
        /// <remarks/>
        public event removeCompletedEventHandler removeCompleted;
        
        /// <remarks/>
        public event resetCompletedEventHandler resetCompleted;
        
        /// <remarks/>
        public event isDefinedCompletedEventHandler isDefinedCompleted;
        
        /// <remarks/>
        public event enableCompletedEventHandler enableCompleted;
        
        /// <remarks/>
        public event unlockCompletedEventHandler unlockCompleted;
        
        /// <remarks/>
        public event isLockedCompletedEventHandler isLockedCompleted;
        
        /// <remarks/>
        public event updateCompletedEventHandler updateCompleted;
        
        /// <remarks/>
        public event isEnabledCompletedEventHandler isEnabledCompleted;
        
        /// <remarks/>
        public event getAccountCompletedEventHandler getAccountCompleted;
        
        /// <remarks/>
        public event unlinkCompletedEventHandler unlinkCompleted;
        
        /// <remarks/>
        public event linkCompletedEventHandler linkCompleted;
        
        /// <remarks/>
        public event getLockedCompletedEventHandler getLockedCompleted;
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/user", ResponseNamespace="http://portwise.com/ws/user")]
        [return: SoapElement("addReturn")]
        public MapItem[] add(Subject in0, Account in1, bool in2) {
            object[] results = Invoke("add", new object[] {
                        in0,
                        in1,
                        in2});
            return ((MapItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginadd(Subject in0, Account in1, bool in2, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("add", new object[] {
                        in0,
                        in1,
                        in2}, callback, asyncState);
        }
        
        /// <remarks/>
        public MapItem[] Endadd(System.IAsyncResult asyncResult) {
            object[] results = EndInvoke(asyncResult);
            return ((MapItem[])(results[0]));
        }
        
        /// <remarks/>
        public void addAsync(Subject in0, Account in1, bool in2) {
            addAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void addAsync(Subject in0, Account in1, bool in2, object userState) {
            if ((addOperationCompleted == null)) {
                addOperationCompleted = new System.Threading.SendOrPostCallback(OnaddOperationCompleted);
            }
            InvokeAsync("add", new object[] {
                        in0,
                        in1,
                        in2}, addOperationCompleted, userState);
        }
        
        private void OnaddOperationCompleted(object arg) {
            if ((addCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                addCompleted(this, new addCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/user", ResponseNamespace="http://portwise.com/ws/user")]
        public void remove(Subject in0, string in1) {
            Invoke("remove", new object[] {
                        in0,
                        in1});
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginremove(Subject in0, string in1, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("remove", new object[] {
                        in0,
                        in1}, callback, asyncState);
        }
        
        /// <remarks/>
        public void Endremove(System.IAsyncResult asyncResult) {
            EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void removeAsync(Subject in0, string in1) {
            removeAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void removeAsync(Subject in0, string in1, object userState) {
            if ((removeOperationCompleted == null)) {
                removeOperationCompleted = new System.Threading.SendOrPostCallback(OnremoveOperationCompleted);
            }
            InvokeAsync("remove", new object[] {
                        in0,
                        in1}, removeOperationCompleted, userState);
        }
        
        private void OnremoveOperationCompleted(object arg) {
            if ((removeCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                removeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/user", ResponseNamespace="http://portwise.com/ws/user")]
        public void reset(Subject in0, string in1, int in2) {
            Invoke("reset", new object[] {
                        in0,
                        in1,
                        in2});
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginreset(Subject in0, string in1, int in2, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("reset", new object[] {
                        in0,
                        in1,
                        in2}, callback, asyncState);
        }
        
        /// <remarks/>
        public void Endreset(System.IAsyncResult asyncResult) {
            EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void resetAsync(Subject in0, string in1, int in2) {
            resetAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void resetAsync(Subject in0, string in1, int in2, object userState) {
            if ((resetOperationCompleted == null)) {
                resetOperationCompleted = new System.Threading.SendOrPostCallback(OnresetOperationCompleted);
            }
            InvokeAsync("reset", new object[] {
                        in0,
                        in1,
                        in2}, resetOperationCompleted, userState);
        }
        
        private void OnresetOperationCompleted(object arg) {
            if ((resetCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                resetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/user", ResponseNamespace="http://portwise.com/ws/user")]
        [return: SoapElement("isDefinedReturn")]
        public bool isDefined(Subject in0, string in1, int in2) {
            object[] results = Invoke("isDefined", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginisDefined(Subject in0, string in1, int in2, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("isDefined", new object[] {
                        in0,
                        in1,
                        in2}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndisDefined(System.IAsyncResult asyncResult) {
            object[] results = EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isDefinedAsync(Subject in0, string in1, int in2) {
            isDefinedAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void isDefinedAsync(Subject in0, string in1, int in2, object userState) {
            if ((isDefinedOperationCompleted == null)) {
                isDefinedOperationCompleted = new System.Threading.SendOrPostCallback(OnisDefinedOperationCompleted);
            }
            InvokeAsync("isDefined", new object[] {
                        in0,
                        in1,
                        in2}, isDefinedOperationCompleted, userState);
        }
        
        private void OnisDefinedOperationCompleted(object arg) {
            if ((isDefinedCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                isDefinedCompleted(this, new isDefinedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/user", ResponseNamespace="http://portwise.com/ws/user")]
        public void enable(Subject in0, string in1, bool in2) {
            Invoke("enable", new object[] {
                        in0,
                        in1,
                        in2});
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginenable(Subject in0, string in1, bool in2, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("enable", new object[] {
                        in0,
                        in1,
                        in2}, callback, asyncState);
        }
        
        /// <remarks/>
        public void Endenable(System.IAsyncResult asyncResult) {
            EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void enableAsync(Subject in0, string in1, bool in2) {
            enableAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void enableAsync(Subject in0, string in1, bool in2, object userState) {
            if ((enableOperationCompleted == null)) {
                enableOperationCompleted = new System.Threading.SendOrPostCallback(OnenableOperationCompleted);
            }
            InvokeAsync("enable", new object[] {
                        in0,
                        in1,
                        in2}, enableOperationCompleted, userState);
        }
        
        private void OnenableOperationCompleted(object arg) {
            if ((enableCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                enableCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/user", ResponseNamespace="http://portwise.com/ws/user")]
        public void unlock(Subject in0, string in1, int in2) {
            Invoke("unlock", new object[] {
                        in0,
                        in1,
                        in2});
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginunlock(Subject in0, string in1, int in2, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("unlock", new object[] {
                        in0,
                        in1,
                        in2}, callback, asyncState);
        }
        
        /// <remarks/>
        public void Endunlock(System.IAsyncResult asyncResult) {
            EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void unlockAsync(Subject in0, string in1, int in2) {
            unlockAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void unlockAsync(Subject in0, string in1, int in2, object userState) {
            if ((unlockOperationCompleted == null)) {
                unlockOperationCompleted = new System.Threading.SendOrPostCallback(OnunlockOperationCompleted);
            }
            InvokeAsync("unlock", new object[] {
                        in0,
                        in1,
                        in2}, unlockOperationCompleted, userState);
        }
        
        private void OnunlockOperationCompleted(object arg) {
            if ((unlockCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                unlockCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/user", ResponseNamespace="http://portwise.com/ws/user")]
        [return: SoapElement("isLockedReturn")]
        public bool isLocked(Subject in0, string in1, int in2) {
            object[] results = Invoke("isLocked", new object[] {
                        in0,
                        in1,
                        in2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginisLocked(Subject in0, string in1, int in2, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("isLocked", new object[] {
                        in0,
                        in1,
                        in2}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndisLocked(System.IAsyncResult asyncResult) {
            object[] results = EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isLockedAsync(Subject in0, string in1, int in2) {
            isLockedAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void isLockedAsync(Subject in0, string in1, int in2, object userState) {
            if ((isLockedOperationCompleted == null)) {
                isLockedOperationCompleted = new System.Threading.SendOrPostCallback(OnisLockedOperationCompleted);
            }
            InvokeAsync("isLocked", new object[] {
                        in0,
                        in1,
                        in2}, isLockedOperationCompleted, userState);
        }
        
        private void OnisLockedOperationCompleted(object arg) {
            if ((isLockedCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                isLockedCompleted(this, new isLockedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/user", ResponseNamespace="http://portwise.com/ws/user")]
        [return: SoapElement("updateReturn")]
        public MapItem[] update(Subject in0, Account in1) {
            object[] results = Invoke("update", new object[] {
                        in0,
                        in1});
            return ((MapItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginupdate(Subject in0, Account in1, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("update", new object[] {
                        in0,
                        in1}, callback, asyncState);
        }
        
        /// <remarks/>
        public MapItem[] Endupdate(System.IAsyncResult asyncResult) {
            object[] results = EndInvoke(asyncResult);
            return ((MapItem[])(results[0]));
        }
        
        /// <remarks/>
        public void updateAsync(Subject in0, Account in1) {
            updateAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void updateAsync(Subject in0, Account in1, object userState) {
            if ((updateOperationCompleted == null)) {
                updateOperationCompleted = new System.Threading.SendOrPostCallback(OnupdateOperationCompleted);
            }
            InvokeAsync("update", new object[] {
                        in0,
                        in1}, updateOperationCompleted, userState);
        }
        
        private void OnupdateOperationCompleted(object arg) {
            if ((updateCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                updateCompleted(this, new updateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/user", ResponseNamespace="http://portwise.com/ws/user")]
        [return: SoapElement("isEnabledReturn")]
        public bool isEnabled(Subject in0, string in1) {
            object[] results = Invoke("isEnabled", new object[] {
                        in0,
                        in1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginisEnabled(Subject in0, string in1, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("isEnabled", new object[] {
                        in0,
                        in1}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndisEnabled(System.IAsyncResult asyncResult) {
            object[] results = EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isEnabledAsync(Subject in0, string in1) {
            isEnabledAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void isEnabledAsync(Subject in0, string in1, object userState) {
            if ((isEnabledOperationCompleted == null)) {
                isEnabledOperationCompleted = new System.Threading.SendOrPostCallback(OnisEnabledOperationCompleted);
            }
            InvokeAsync("isEnabled", new object[] {
                        in0,
                        in1}, isEnabledOperationCompleted, userState);
        }
        
        private void OnisEnabledOperationCompleted(object arg) {
            if ((isEnabledCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                isEnabledCompleted(this, new isEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/user", ResponseNamespace="http://portwise.com/ws/user")]
        [return: SoapElement("getAccountReturn")]
        public Account getAccount(Subject in0, string in1) {
            object[] results = Invoke("getAccount", new object[] {
                        in0,
                        in1});
            return ((Account)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetAccount(Subject in0, string in1, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("getAccount", new object[] {
                        in0,
                        in1}, callback, asyncState);
        }
        
        /// <remarks/>
        public Account EndgetAccount(System.IAsyncResult asyncResult) {
            object[] results = EndInvoke(asyncResult);
            return ((Account)(results[0]));
        }
        
        /// <remarks/>
        public void getAccountAsync(Subject in0, string in1) {
            getAccountAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getAccountAsync(Subject in0, string in1, object userState) {
            if ((getAccountOperationCompleted == null)) {
                getAccountOperationCompleted = new System.Threading.SendOrPostCallback(OngetAccountOperationCompleted);
            }
            InvokeAsync("getAccount", new object[] {
                        in0,
                        in1}, getAccountOperationCompleted, userState);
        }
        
        private void OngetAccountOperationCompleted(object arg) {
            if ((getAccountCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                getAccountCompleted(this, new getAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/user", ResponseNamespace="http://portwise.com/ws/user")]
        public void unlink(Subject in0, string in1) {
            Invoke("unlink", new object[] {
                        in0,
                        in1});
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginunlink(Subject in0, string in1, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("unlink", new object[] {
                        in0,
                        in1}, callback, asyncState);
        }
        
        /// <remarks/>
        public void Endunlink(System.IAsyncResult asyncResult) {
            EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void unlinkAsync(Subject in0, string in1) {
            unlinkAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void unlinkAsync(Subject in0, string in1, object userState) {
            if ((unlinkOperationCompleted == null)) {
                unlinkOperationCompleted = new System.Threading.SendOrPostCallback(OnunlinkOperationCompleted);
            }
            InvokeAsync("unlink", new object[] {
                        in0,
                        in1}, unlinkOperationCompleted, userState);
        }
        
        private void OnunlinkOperationCompleted(object arg) {
            if ((unlinkCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                unlinkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/user", ResponseNamespace="http://portwise.com/ws/user")]
        public void link(Subject in0, string in1, bool in2) {
            Invoke("link", new object[] {
                        in0,
                        in1,
                        in2});
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginlink(Subject in0, string in1, bool in2, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("link", new object[] {
                        in0,
                        in1,
                        in2}, callback, asyncState);
        }
        
        /// <remarks/>
        public void Endlink(System.IAsyncResult asyncResult) {
            EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void linkAsync(Subject in0, string in1, bool in2) {
            linkAsync(in0, in1, in2, null);
        }
        
        /// <remarks/>
        public void linkAsync(Subject in0, string in1, bool in2, object userState) {
            if ((linkOperationCompleted == null)) {
                linkOperationCompleted = new System.Threading.SendOrPostCallback(OnlinkOperationCompleted);
            }
            InvokeAsync("link", new object[] {
                        in0,
                        in1,
                        in2}, linkOperationCompleted, userState);
        }
        
        private void OnlinkOperationCompleted(object arg) {
            if ((linkCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                linkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace="http://portwise.com/ws/user", ResponseNamespace="http://portwise.com/ws/user")]
        [return: SoapElement("getLockedReturn")]
        public string[] getLocked(Subject in0, int in1) {
            object[] results = Invoke("getLocked", new object[] {
                        in0,
                        in1});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetLocked(Subject in0, int in1, System.AsyncCallback callback, object asyncState) {
            return BeginInvoke("getLocked", new object[] {
                        in0,
                        in1}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndgetLocked(System.IAsyncResult asyncResult) {
            object[] results = EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getLockedAsync(Subject in0, int in1) {
            getLockedAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void getLockedAsync(Subject in0, int in1, object userState) {
            if ((getLockedOperationCompleted == null)) {
                getLockedOperationCompleted = new System.Threading.SendOrPostCallback(OngetLockedOperationCompleted);
            }
            InvokeAsync("getLocked", new object[] {
                        in0,
                        in1}, getLockedOperationCompleted, userState);
        }
        
        private void OngetLockedOperationCompleted(object arg) {
            if ((getLockedCompleted != null)) {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
                getLockedCompleted(this, new getLockedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
        
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [SoapType(Namespace="http://portwise.com/ws/user")]
    public partial class WebProperties {
        
        private bool enabledField;
        
        private bool generatePwdField;
        
        private string passwordField;
        
        private bool pwdNeverExpiresField;
        
        private bool userCannotChangePwdField;
        
        private bool userMustChangePwdField;
        
        /// <remarks/>
        public bool enabled {
            get {
                return enabledField;
            }
            set {
                enabledField = value;
            }
        }
        
        /// <remarks/>
        public bool generatePwd {
            get {
                return generatePwdField;
            }
            set {
                generatePwdField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string password {
            get {
                return passwordField;
            }
            set {
                passwordField = value;
            }
        }
        
        /// <remarks/>
        public bool pwdNeverExpires {
            get {
                return pwdNeverExpiresField;
            }
            set {
                pwdNeverExpiresField = value;
            }
        }
        
        /// <remarks/>
        public bool userCannotChangePwd {
            get {
                return userCannotChangePwdField;
            }
            set {
                userCannotChangePwdField = value;
            }
        }
        
        /// <remarks/>
        public bool userMustChangePwd {
            get {
                return userMustChangePwdField;
            }
            set {
                userMustChangePwdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [SoapType(Namespace="http://portwise.com/ws/user")]
    public partial class SynchronizedProperties {
        
        private bool enabledField;
        
        private bool generatePinField;
        
        private bool generateSeedField;
        
        private string pinField;
        
        private bool pinNeverExpiresField;
        
        private int seedingMethodField;
        
        private bool userCannotChangePinField;
        
        private bool userMustChangePinField;
        
        /// <remarks/>
        public bool enabled {
            get {
                return enabledField;
            }
            set {
                enabledField = value;
            }
        }
        
        /// <remarks/>
        public bool generatePin {
            get {
                return generatePinField;
            }
            set {
                generatePinField = value;
            }
        }
        
        /// <remarks/>
        public bool generateSeed {
            get {
                return generateSeedField;
            }
            set {
                generateSeedField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string pin {
            get {
                return pinField;
            }
            set {
                pinField = value;
            }
        }
        
        /// <remarks/>
        public bool pinNeverExpires {
            get {
                return pinNeverExpiresField;
            }
            set {
                pinNeverExpiresField = value;
            }
        }
        
        /// <remarks/>
        public int seedingMethod {
            get {
                return seedingMethodField;
            }
            set {
                seedingMethodField = value;
            }
        }
        
        /// <remarks/>
        public bool userCannotChangePin {
            get {
                return userCannotChangePinField;
            }
            set {
                userCannotChangePinField = value;
            }
        }
        
        /// <remarks/>
        public bool userMustChangePin {
            get {
                return userMustChangePinField;
            }
            set {
                userMustChangePinField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [SoapType(Namespace="http://portwise.com/ws/user")]
    public partial class PasswordProperties {
        
        private bool enabledField;
        
        private bool generatePwdField;
        
        private string passwordField;
        
        private bool pwdNeverExpiresField;
        
        private bool useDirectoryPwdField;
        
        private bool userCannotChangePwdField;
        
        private bool userMustChangePwdField;
        
        /// <remarks/>
        public bool enabled {
            get {
                return enabledField;
            }
            set {
                enabledField = value;
            }
        }
        
        /// <remarks/>
        public bool generatePwd {
            get {
                return generatePwdField;
            }
            set {
                generatePwdField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string password {
            get {
                return passwordField;
            }
            set {
                passwordField = value;
            }
        }
        
        /// <remarks/>
        public bool pwdNeverExpires {
            get {
                return pwdNeverExpiresField;
            }
            set {
                pwdNeverExpiresField = value;
            }
        }
        
        /// <remarks/>
        public bool useDirectoryPwd {
            get {
                return useDirectoryPwdField;
            }
            set {
                useDirectoryPwdField = value;
            }
        }
        
        /// <remarks/>
        public bool userCannotChangePwd {
            get {
                return userCannotChangePwdField;
            }
            set {
                userCannotChangePwdField = value;
            }
        }
        
        /// <remarks/>
        public bool userMustChangePwd {
            get {
                return userMustChangePwdField;
            }
            set {
                userMustChangePwdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [SoapType(Namespace="http://portwise.com/ws/user")]
    public partial class MobileTextProperties {
        
        private bool enabledField;
        
        private bool generatePwdField;
        
        private string passwordField;
        
        private bool pwdNeverExpiresField;
        
        private bool useDirectoryPwdField;
        
        private bool userCannotChangePwdField;
        
        private bool userMustChangePwdField;
        
        /// <remarks/>
        public bool enabled {
            get {
                return enabledField;
            }
            set {
                enabledField = value;
            }
        }
        
        /// <remarks/>
        public bool generatePwd {
            get {
                return generatePwdField;
            }
            set {
                generatePwdField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string password {
            get {
                return passwordField;
            }
            set {
                passwordField = value;
            }
        }
        
        /// <remarks/>
        public bool pwdNeverExpires {
            get {
                return pwdNeverExpiresField;
            }
            set {
                pwdNeverExpiresField = value;
            }
        }
        
        /// <remarks/>
        public bool useDirectoryPwd {
            get {
                return useDirectoryPwdField;
            }
            set {
                useDirectoryPwdField = value;
            }
        }
        
        /// <remarks/>
        public bool userCannotChangePwd {
            get {
                return userCannotChangePwdField;
            }
            set {
                userCannotChangePwdField = value;
            }
        }
        
        /// <remarks/>
        public bool userMustChangePwd {
            get {
                return userMustChangePwdField;
            }
            set {
                userMustChangePwdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [SoapType(Namespace="http://portwise.com/ws/user")]
    public partial class InvisibleToken {
        
        private string browsernameField;
        
        private long createdField;
        
        private long lastUsedField;
        
        private bool removeField;
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string browsername {
            get {
                return browsernameField;
            }
            set {
                browsernameField = value;
            }
        }
        
        /// <remarks/>
        public long created {
            get {
                return createdField;
            }
            set {
                createdField = value;
            }
        }
        
        /// <remarks/>
        public long lastUsed {
            get {
                return lastUsedField;
            }
            set {
                lastUsedField = value;
            }
        }
        
        /// <remarks/>
        public bool remove {
            get {
                return removeField;
            }
            set {
                removeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [SoapType(Namespace="http://portwise.com/ws/user")]
    public partial class InvisibleTokenProperties {
        
        private bool activateBrowserNextLogonField;
        
        private bool enabledField;
        
        private bool generatePwdField;
        
        private InvisibleToken[] invisibleTokensField;
        
        private string passwordField;
        
        private bool pwdNeverExpiresField;
        
        private bool useDirectoryPwdField;
        
        private bool userCannotChangePwdField;
        
        private bool userMustChangePwdField;
        
        /// <remarks/>
        public bool activateBrowserNextLogon {
            get {
                return activateBrowserNextLogonField;
            }
            set {
                activateBrowserNextLogonField = value;
            }
        }
        
        /// <remarks/>
        public bool enabled {
            get {
                return enabledField;
            }
            set {
                enabledField = value;
            }
        }
        
        /// <remarks/>
        public bool generatePwd {
            get {
                return generatePwdField;
            }
            set {
                generatePwdField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public InvisibleToken[] invisibleTokens {
            get {
                return invisibleTokensField;
            }
            set {
                invisibleTokensField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string password {
            get {
                return passwordField;
            }
            set {
                passwordField = value;
            }
        }
        
        /// <remarks/>
        public bool pwdNeverExpires {
            get {
                return pwdNeverExpiresField;
            }
            set {
                pwdNeverExpiresField = value;
            }
        }
        
        /// <remarks/>
        public bool useDirectoryPwd {
            get {
                return useDirectoryPwdField;
            }
            set {
                useDirectoryPwdField = value;
            }
        }
        
        /// <remarks/>
        public bool userCannotChangePwd {
            get {
                return userCannotChangePwdField;
            }
            set {
                userCannotChangePwdField = value;
            }
        }
        
        /// <remarks/>
        public bool userMustChangePwd {
            get {
                return userMustChangePwdField;
            }
            set {
                userMustChangePwdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [SoapType(Namespace="http://portwise.com/ws/user")]
    public partial class ChallengeProperties {
        
        private bool enabledField;
        
        private bool generatePinField;
        
        private bool generateSeedField;
        
        private string pinField;
        
        private bool pinNeverExpiresField;
        
        private int seedingMethodField;
        
        private bool userCannotChangePinField;
        
        private bool userMustChangePinField;
        
        /// <remarks/>
        public bool enabled {
            get {
                return enabledField;
            }
            set {
                enabledField = value;
            }
        }
        
        /// <remarks/>
        public bool generatePin {
            get {
                return generatePinField;
            }
            set {
                generatePinField = value;
            }
        }
        
        /// <remarks/>
        public bool generateSeed {
            get {
                return generateSeedField;
            }
            set {
                generateSeedField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string pin {
            get {
                return pinField;
            }
            set {
                pinField = value;
            }
        }
        
        /// <remarks/>
        public bool pinNeverExpires {
            get {
                return pinNeverExpiresField;
            }
            set {
                pinNeverExpiresField = value;
            }
        }
        
        /// <remarks/>
        public int seedingMethod {
            get {
                return seedingMethodField;
            }
            set {
                seedingMethodField = value;
            }
        }
        
        /// <remarks/>
        public bool userCannotChangePin {
            get {
                return userCannotChangePinField;
            }
            set {
                userCannotChangePinField = value;
            }
        }
        
        /// <remarks/>
        public bool userMustChangePin {
            get {
                return userMustChangePinField;
            }
            set {
                userMustChangePinField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [SoapType(Namespace="http://portwise.com/ws/user")]
    public partial class MethodAccess {
        
        private ChallengeProperties challengePropsField;
        
        private InvisibleTokenProperties invisibleTokenPropsField;
        
        private bool lockedField;
        
        private int maxRetriesField;
        
        private MobileTextProperties mobileTextPropsField;
        
        private int numRetriesField;
        
        private PasswordProperties passwordPropsField;
        
        private string radiusFramedIPField;
        
        private string radiusGroupField;
        
        private SynchronizedProperties synchronizedPropsField;
        
        private bool timeLockActivatedField;
        
        private long timeLockedToField;
        
        private WebProperties webPropsField;
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public ChallengeProperties challengeProps {
            get {
                return challengePropsField;
            }
            set {
                challengePropsField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public InvisibleTokenProperties invisibleTokenProps {
            get {
                return invisibleTokenPropsField;
            }
            set {
                invisibleTokenPropsField = value;
            }
        }
        
        /// <remarks/>
        public bool locked {
            get {
                return lockedField;
            }
            set {
                lockedField = value;
            }
        }
        
        /// <remarks/>
        public int maxRetries {
            get {
                return maxRetriesField;
            }
            set {
                maxRetriesField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public MobileTextProperties mobileTextProps {
            get {
                return mobileTextPropsField;
            }
            set {
                mobileTextPropsField = value;
            }
        }
        
        /// <remarks/>
        public int numRetries {
            get {
                return numRetriesField;
            }
            set {
                numRetriesField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public PasswordProperties passwordProps {
            get {
                return passwordPropsField;
            }
            set {
                passwordPropsField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string radiusFramedIP {
            get {
                return radiusFramedIPField;
            }
            set {
                radiusFramedIPField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string radiusGroup {
            get {
                return radiusGroupField;
            }
            set {
                radiusGroupField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public SynchronizedProperties synchronizedProps {
            get {
                return synchronizedPropsField;
            }
            set {
                synchronizedPropsField = value;
            }
        }
        
        /// <remarks/>
        public bool timeLockActivated {
            get {
                return timeLockActivatedField;
            }
            set {
                timeLockActivatedField = value;
            }
        }
        
        /// <remarks/>
        public long timeLockedTo {
            get {
                return timeLockedToField;
            }
            set {
                timeLockedToField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public WebProperties webProps {
            get {
                return webPropsField;
            }
            set {
                webPropsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [SoapType(Namespace="http://portwise.com/ws/user")]
    public partial class GlobalAccess {
        
        private bool lockedField;
        
        private int maxRetriesField;
        
        private int numRetriesField;
        
        /// <remarks/>
        public bool locked {
            get {
                return lockedField;
            }
            set {
                lockedField = value;
            }
        }
        
        /// <remarks/>
        public int maxRetries {
            get {
                return maxRetriesField;
            }
            set {
                maxRetriesField = value;
            }
        }
        
        /// <remarks/>
        public int numRetries {
            get {
                return numRetriesField;
            }
            set {
                numRetriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [SoapType(Namespace="http://portwise.com/ws/user")]
    public partial class Account {
        
        private MapItem[] customAttribsField;
        
        private string displayNameField;
        
        private string emailAddressField;
        
        private bool enabledField;
        
        private GlobalAccess globalAccessField;
        
        private long lastLogonField;
        
        private string locationDNField;
        
        private MethodAccess methodAccessField;
        
        private MapItem[] notificationMappingsField;
        
        private string smsNumberField;
        
        private byte[] userCertificateField;
        
        private string userNameField;
        
        private long validFromField;
        
        private long validToField;
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public MapItem[] customAttribs {
            get {
                return customAttribsField;
            }
            set {
                customAttribsField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string displayName {
            get {
                return displayNameField;
            }
            set {
                displayNameField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string emailAddress {
            get {
                return emailAddressField;
            }
            set {
                emailAddressField = value;
            }
        }
        
        /// <remarks/>
        public bool enabled {
            get {
                return enabledField;
            }
            set {
                enabledField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public GlobalAccess globalAccess {
            get {
                return globalAccessField;
            }
            set {
                globalAccessField = value;
            }
        }
        
        /// <remarks/>
        public long lastLogon {
            get {
                return lastLogonField;
            }
            set {
                lastLogonField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string locationDN {
            get {
                return locationDNField;
            }
            set {
                locationDNField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public MethodAccess methodAccess {
            get {
                return methodAccessField;
            }
            set {
                methodAccessField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public MapItem[] notificationMappings {
            get {
                return notificationMappingsField;
            }
            set {
                notificationMappingsField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string smsNumber {
            get {
                return smsNumberField;
            }
            set {
                smsNumberField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(DataType="base64Binary", IsNullable=true)]
        public byte[] userCertificate {
            get {
                return userCertificateField;
            }
            set {
                userCertificateField = value;
            }
        }
        
        /// <remarks/>
        [SoapElement(IsNullable=true)]
        public string userName {
            get {
                return userNameField;
            }
            set {
                userNameField = value;
            }
        }
        
        /// <remarks/>
        public long validFrom {
            get {
                return validFromField;
            }
            set {
                validFromField = value;
            }
        }
        
        /// <remarks/>
        public long validTo {
            get {
                return validToField;
            }
            set {
                validToField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void addCompletedEventHandler(object sender, addCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class addCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MapItem[] Result {
            get {
                RaiseExceptionIfNecessary();
                return ((MapItem[])(results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void removeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void resetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void isDefinedCompletedEventHandler(object sender, isDefinedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class isDefinedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isDefinedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                RaiseExceptionIfNecessary();
                return ((bool)(results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void enableCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void unlockCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void isLockedCompletedEventHandler(object sender, isLockedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class isLockedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isLockedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                RaiseExceptionIfNecessary();
                return ((bool)(results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void updateCompletedEventHandler(object sender, updateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class updateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MapItem[] Result {
            get {
                RaiseExceptionIfNecessary();
                return ((MapItem[])(results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void isEnabledCompletedEventHandler(object sender, isEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class isEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                RaiseExceptionIfNecessary();
                return ((bool)(results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void getAccountCompletedEventHandler(object sender, getAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class getAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Account Result {
            get {
                RaiseExceptionIfNecessary();
                return ((Account)(results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void unlinkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void linkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    public delegate void getLockedCompletedEventHandler(object sender, getLockedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("wsdl", "4.6.1055.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class getLockedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLockedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                RaiseExceptionIfNecessary();
                return ((string[])(results[0]));
            }
        }
    }
}
